(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{484:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1611836658535-ed42a756-fefd-4da7-9e79-3761d88ee799.png#height=315&id=xOjcS&name=image.png&originHeight=315&originWidth=325&originalType=binary&ratio=1&size=22725&status=done&style=none&width=325",alt:"image.png"}})]),t._v(" "),s("p",[t._v("内部编码：raw、int、embstr、hashtable、ziplist、linkedlist、inset、skiplist")]),t._v(" "),s("h2",{attrs:{id:"总体数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总体数据结构"}},[t._v("#")]),t._v(" 总体数据结构")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1611840318546-04930414-a962-445d-919d-35fa30a699bb.png#height=940&id=oNYQS&name=72.png&originHeight=940&originWidth=1916&originalType=binary&ratio=1&size=233993&status=done&style=none&width=1916",alt:"72.png"}})]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.yuque.com/javadu/vfxi7u/uok7nu",target:"_blank",rel:"noopener noreferrer"}},[t._v("语音理解"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("em",[t._v("redisDB结构的expires字典保存了数据库中所有键的过期时间，我们称这个字典为过期字典：")])]),t._v(" "),s("ul",[s("li",[s("em",[t._v("过期字典的键是一个指针，这个指针指向键空间中的某个键对象")])]),t._v(" "),s("li",[s("em",[t._v("过期字典的值是一个long long类型的整数，这个整数保存了键所指向的数据库键的过期时间")])])]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Redis数据库结构体 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisDb")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据库键空间，存放着所有的键值对（键为key，值为相应的类型对象）")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                 \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键的过期时间")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("expires"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("              \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处于阻塞状态的键和相应的client（主要用于List类型的阻塞操作）")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("blocking_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 准备好数据可以解除阻塞状态的键和相应的client")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ready_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 被watch命令监控的key和相应client")]),t._v("\n    dict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("watched_keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据库ID标识")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据库内所有键的平均TTL（平均过期时间）")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" avg_ttl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" redisDb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 字典数据结构 **/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表的类型，不同类型包括不同的哈希函数，比较函数，键值的内存释放函数")]),t._v("\n    dictType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储一些额外的数据，一般用不到")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("privdata"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 两个hashtable，另外一个扩容时用")]),t._v("\n    dictht ht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rehash使用")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" rehashidx"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* rehashing not in progress if rehashidx == -1 */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** hashtable **/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictht")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hashtable")]),t._v("\n    dictEntry "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 哈希表的大小")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// size - 1")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" sizemask"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据长度")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" used"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictht"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hashtable存放的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向key的指针，肯定时指向一个SDS")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("val"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" u64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),t._v(" s64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" v"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hash冲突使用拉链法，指向下一个元素")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dictEntry")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" dictEntry"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisObject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4 bit")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4 bit")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" lru"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("LRU_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内存淘汰策略 24 bit")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" refcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用计算法 4 byte")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr； "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向真正的数据内存空间 8 byte")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 总空间： 4bit + 4 bit + 24 bit + 4 byte + 8 byte = 16byte")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("em",[t._v("unsigned lru:LRU_BITS：对象最后一次被访问的时间")])]),t._v(" "),s("h2",{attrs:{id:"string"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" string")]),t._v(" "),s("blockquote",[s("p",[t._v("redis中所有的key都是String类型，redis底层是C语言实现的")]),t._v(" "),s("p",[t._v("ASCII码：一个英文字母（不分大小写）占一个字节的空间，一个中文汉字占两个字节的空间")]),t._v(" "),s("p",[t._v("UTF-8编码：一个英文字符等于一个字节，一个中文（含繁体）等于三个字节")]),t._v(" "),s("p",[t._v("Unicode编码：一个英文等于两个字节，一个中文（含繁体）等于两个字节")])]),t._v(" "),s("p",[t._v("C中字符串的定义：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'guojia'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("C语言中，会默认给字符串末尾增加一个")]),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),s("span",{pre:!0,attrs:{class:"token expression"}},[t._v("，一个字节")])]),t._v("\n# 假如有的字符串中就包含"),s("span",{pre:!0,attrs:{class:"token char"}},[t._v("'\\0'")]),t._v("怎么办？\n")])])]),s("p",[s("em",[t._v("redis是通过加了个sds的结构解决\\0的问题，很好奇其他中间件如何解决的，每个都需要自己解决，是不是太麻烦了")])]),t._v(" "),s("h3",{attrs:{id:"二进制安全"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制安全"}},[t._v("#")]),t._v(" 二进制安全")]),t._v(" "),s("p",[t._v("为了解决上面的问题，redis重新定义了一个数据结构sdshdr(sds：simple dynamic string)：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// redis 3.0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录buf数组中已使用字节的数量，即SDS所保存字符串的长度")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 记录buf数据中未使用的字节数量")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" free"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字节数组，用于保存字符串")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"内存预分配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存预分配"}},[t._v("#")]),t._v(" 内存预分配")]),t._v(" "),s("p",[t._v("需要修改某个key的value，如果增加的长度超过free，就需要对原数组进行扩容了；redis扩容的规则：")]),t._v(" "),s("ul",[s("li",[t._v("（len + addlen）* 2，例如：当前数组长度是6，free=0，要修改成12个字节的新字符串，扩容后长度 = （6 + （12 - 6）） * 2 = 24")]),t._v(" "),s("li",[t._v("当value的长度超过1M（即1024个字节），每次扩容都是 + 1M")])]),t._v(" "),s("p",[t._v("扩容之后的长度要比需要的长度大，称之为内存预分配")]),t._v(" "),s("h3",{attrs:{id:"兼容部分c字符串函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#兼容部分c字符串函数"}},[t._v("#")]),t._v(" 兼容部分C字符串函数")]),t._v(" "),s("p",[t._v("虽然SDS的API是二进制安全的，但还是像C字符串一样以空字符结尾，目的是为了让保存文本数据的SDS可以重用一部分C字符串的函数")]),t._v(" "),s("h3",{attrs:{id:"c字符串与sds对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c字符串与sds对比"}},[t._v("#")]),t._v(" C字符串与SDS对比")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1677066017652-abf5621f-9a26-4652-a922-6a5b794bdc1e.png?x-oss-process=image%2Fresize%2Cw_1466%2Climit_0",alt:""}})]),t._v(" "),s("p",[t._v("程序中有两个在内存中紧邻着的字符串 s1 和 s2，其中s1保存了字符串“redis”，s2 则保存了字符“MongoDb”；现在将s1 的内容修改为redis cluster，但是又忘了重新为s1 分配足够的空间，这时候就会出现以下问题：原本s2中的内容已经被S1的内容给占领了，s2现在为 cluster，而不是“Mongodb”，这就是缓冲区溢出\n"),s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1611922178483-37b0ce34-81a2-428a-9786-c172da16b0c9.png#height=77&id=F6V3M&name=image.png&originHeight=154&originWidth=976&originalType=binary&ratio=1&size=19757&status=done&style=none&width=488",alt:"image.png"}})]),t._v(" "),s("h3",{attrs:{id:"sds升级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sds升级"}},[t._v("#")]),t._v(" SDS升级")]),t._v(" "),s("p",[t._v("redis 3.2之前的数据结构，len和free都是int类型，int要占用4个字节；并且一般我们字符串的长度没有4个字节这么长，所以很浪费空间；3.2对SDS进行了升级：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3.2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Note: sdshdr5 is never used, we just access the flags byte directly.\n * However is here to document the layout of type 5 SDS strings. */")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__packed__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 3 lsb of type, and 5 msb of string length */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__packed__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr8")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* used */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint8_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* excluding the header and null terminator */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 3 lsb of type, 5 unused bits */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__packed__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* used */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint16_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* excluding the header and null terminator */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 3 lsb of type, 5 unused bits */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__packed__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* used */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* excluding the header and null terminator */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 3 lsb of type, 5 unused bits */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("__attribute__")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__packed__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("sdshdr64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* used */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint64_t")]),t._v(" alloc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* excluding the header and null terminator */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" flags"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 3 lsb of type, 5 unused bits */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" buf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("3.2版本及之后，会根据字符串的长度来选择对应的数据结构：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sdsReqType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" string_size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 32")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SDS_TYPE_5"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 256")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SDS_TYPE_8"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 65536 64k")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SDS_TYPE_16"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1ll")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4294967296 4G")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SDS_TYPE_32"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" SDS_TYPE_64"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("sdshdr5的数据结构如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1611762090597-c9bd42ce-d6f7-4e5a-af6a-dfcbcf430b93.png#height=326&id=c5rkd&name=68.png&originHeight=326&originWidth=774&originalType=binary&ratio=1&size=17645&status=done&style=none&width=774",alt:"68.png"}})]),t._v(" "),s("p",[t._v("flags占用8bit，前3bit表示数据结构的类型，例如000表示sdshdr5，后5bit表示buf的字节数（长度），2^5 - 1 = 31，最好能表示31个字节的字符串；free：31 - len；如果字符串长度超过31，就要用sdshdr8表示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1611921823970-09f1d7d3-0958-493f-bcae-526a2327fe92.png#height=666&id=dTDQz&name=73.png&originHeight=666&originWidth=1578&originalType=binary&ratio=1&size=67886&status=done&style=none&width=1578",alt:"73.png"}})]),t._v(" "),s("p",[t._v("flags占用8bit，前3bit表示数据结构的类型，例如001表示sdshdr8，后5bit未使用；len表示buf的字节数，allo表示分配的字节数；最长能表示的字符串长度 = 2^8 - 1 = 255")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("推测：\nsdshdr5申请的时候就会分配31个字节，然后31 - len就能求出free\nsdshdr8及更大的结构不会一下就分满，所以需要alloc记录分配的内存，alloc - len = free")]),t._v(" "),s("h3",{attrs:{id:"内部编码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内部编码"}},[t._v("#")]),t._v(" 内部编码")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("redisObject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4 bit")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4 bit")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("unsigned")]),t._v(" lru"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("LRU_BITS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内存淘汰策略 24 bit")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" refcount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 引用计算法 4 byte")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ptr； "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向真正的数据内存空间 8 byte")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 总空间： 4bit + 4 bit + 24 bit + 4 byte + 8 byte = 16byte")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"embstr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#embstr"}},[t._v("#")]),t._v(" embstr")]),t._v(" "),s("p",[t._v("一个redisObject一共是16byte，操作系统通常一下会读取一行数据（缓存行），一般缓存行是64byte；所以一次内存读取64 - redisObject（16byte)）= 48byte，会多读出来48byte的数据；如果我们的数据小于48byte，直接和redisObject放在一起就可以一次读出来；48byte的字符串使用sdshdr8，这个数据结构本身占用3个字节（len + alloc + flags），再加上会在字符串末尾自动加上\\0（1byte），48 - 4 = 44（byte），如果key字符串长度小于等于44，就可以使用embstr")]),t._v(" "),s("h4",{attrs:{id:"int"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[t._v("#")]),t._v(" int")]),t._v(" "),s("p",[t._v("C语言long类型就是8byte存储的，如果value是一个数值，就直接把value存在ptr的位置就好了，不用再重写申请内存空间了；不过如果value超过long的最大值就不行了")]),t._v(" "),s("h4",{attrs:{id:"raw"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#raw"}},[t._v("#")]),t._v(" raw")]),t._v(" "),s("p",[t._v("value长度大于44，使用raw")]),t._v(" "),s("h2",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" list")]),t._v(" "),s("h3",{attrs:{id:"ziplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ziplist"}},[t._v("#")]),t._v(" ziplist")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1612088642106-7e7f5d20-077f-4288-924a-ec4bb0206c34.png#height=481&id=vQSbx&name=image.png&originHeight=481&originWidth=570&originalType=binary&ratio=1&size=50436&status=done&style=none&width=570",alt:"image.png"}})]),t._v(" "),s("ul",[s("li",[t._v("zlbytes：32bit，4个字节，记录ziplist占用的内存字节数；也就是说一个ziplist最大可以包含2^32 - 1个字节，接近4GB")]),t._v(" "),s("li",[t._v("zltail：32bit，4个字节，记录最后一个entry在ziplist中的偏移字节数；方便从尾部遍历")]),t._v(" "),s("li",[t._v("zlen：16bit，2个字节，记录ziplist中entry的个数，一个ziplist最多存放2^16 -1 = 65535个entry")]),t._v(" "),s("li",[t._v("zlend：8bit，1个字节，固定值255，标志ziplist的尾巴；当从 ---\x3e"),s("em",[t._v("（左往右遍历）"),s("em",[t._v("到最后一个entry，再往下判断prevrawlen的时候发现是255就表示ziplist已结束")]),t._v("（再往下判断第一个字节是不是255，如果是表示ziplist结束，所以prevrawlen的第一个字节，最大只能254，如果prevrawlen值也能是255，从左往右就无法判断结束了）")]),t._v("；这也是prevrawlen最大只能是254的原因；当从右完整遍历_（<---）_的时候，判断前一个元素的长度为0就代表ziplist结束了")]),t._v(" "),s("li",[t._v("entry：list的值\n"),s("ul",[s("li",[t._v("prevrawlen：记录前一个元素的长度，为了从右往左遍历_（<---）_")]),t._v(" "),s("li",[t._v("len：当前entry的长度")]),t._v(" "),s("li",[t._v("data：当前entry的value")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1612090444084-45801347-df4f-4e77-9899-b83bda857cfd.png#height=99&id=RSBZm&name=image.png&originHeight=99&originWidth=704&originalType=binary&ratio=1&size=10224&status=done&style=none&width=704",alt:"image.png"}})]),t._v(" "),s("p",[t._v("（每个entry的大小都不一样，不能实现随机读取）")]),t._v(" "),s("p",[t._v("len字段的用法：\n"),s("em",[t._v("（这里len是变长的，就是为了节约len的长度）")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("序号")]),t._v(" "),s("th",[t._v("字段")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("00xxxxxx")]),t._v(" "),s("td",[t._v("剩余的6个bit用来表示长度，最大长度2^6 - 1个byte")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("01xxxxxx xxxxxxxx")]),t._v(" "),s("td",[t._v("前两个高位bit是01，len字段占用2byte，剩余14bit表示长度，最大长度2^14 - 1个byte")])]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td",[t._v("10xxxxxx xxxxxxxx xxxxxxxx xxxxxxxx")]),t._v(" "),s("td",[t._v("前两个高位bit是10，len字段占用4bit，剩余32bit表示长度，最大长度2^32 - 1个byte")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("11000000")]),t._v(" "),s("td",[t._v("前两个高位bit是11，值为OXC0，len字段占1byte，后面的data为2byte的int16类型")])]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td",[t._v("11010000")]),t._v(" "),s("td",[t._v("前两个高位bit是1101，值为OXD0，len字段占1byte，后面的data为4byte的int32类型")])]),t._v(" "),s("tr",[s("td",[t._v("6")]),t._v(" "),s("td",[t._v("...")]),t._v(" "),s("td",[t._v("...")])])])]),t._v(" "),s("h3",{attrs:{id:"linkedlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[t._v("#")]),t._v(" linkedlist")]),t._v(" "),s("p",[t._v("3.2之前，list底层的编码是ziplist和linkedlist实现的；当list对象中元素的长度比较小或者数量比较少的时候，采用ziplist来存储，当list对象中元素的长度比较大或者数量比较多的时候，则会转而使用双向列表linkedlist来存储")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1677066081898-db014ac9-792d-4137-a4f4-2c435856df10.png?x-oss-process=image%2Fresize%2Cw_1462%2Climit_0",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"quicklist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quicklist"}},[t._v("#")]),t._v(" quicklist")]),t._v(" "),s("p",[t._v("3.2之后，一个list底层可以有多个ziplist，ziplist由quicklist关联起来；可以定义每个ziplist的大小，超过就分裂\n"),s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1612094125975-af056828-f216-4a4b-a5a7-10bf4f19e7c7.png#height=371&id=b3CMj&name=image.png&originHeight=371&originWidth=548&originalType=binary&ratio=1&size=38871&status=done&style=none&width=548",alt:"image.png"}})]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("quicklist")]),t._v(" "),s("th",[t._v("quicklistNode")]),t._v(" "),s("th",[t._v("list-max-ziplist-size")])])]),t._v(" "),s("tbody",[s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("ul",[s("li",[t._v("管理quicklistNode组成的双向链表")]),t._v(" "),s("li",[t._v("head：指向双向链表的头节点")]),t._v(" "),s("li",[t._v("tail：指向双向链表的尾节点")]),t._v(" "),s("li",[t._v("count：元素总个数")]),t._v(" "),s("li",[t._v("length：quicklistNode节点数\n|")]),t._v(" "),s("li",[t._v("每个ziplist由一个quicklickNode管理")]),t._v(" "),s("li",[t._v("zl：指向ziplist的指针")]),t._v(" "),s("li",[t._v("count：ziplist元素的个数")]),t._v(" "),s("li",[t._v("prev：指向前一个quicklistNode")]),t._v(" "),s("li",[t._v("next：指向后一个quicklistNode\n|")]),t._v(" "),s("li",[t._v("当取正值的时候，表示按照数据项个数来限定每个quicklist节点上的ziplist长度。比如，当这个参数配置成5的时候，表示每个quicklist节点的ziplist最多包含5个数据项")]),t._v(" "),s("li",[t._v("当取负值的时候，表示按照占用字节数来限定每个quicklist节点上的ziplist长度。这时，它只能取-1到-5这五个值，每个值含义如下：\n"),s("ul",[s("li",[t._v("-5：每个ziplist大小不能超多64kb")]),t._v(" "),s("li",[t._v("-4：不能超过32kb")]),t._v(" "),s("li",[t._v("...\n|")])])])]),t._v(" "),s("h2",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" hash")]),t._v(" "),s("p",[t._v("当数据量比较小，或者单个元素比较小时，底层用ziplist存储（fied和name为一个entry），数据大小和元素阈值可以通过参数控制：")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ziplist元素个数超过512，改为hashtable")]),t._v("\nhash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ziplist"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("entries "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("512")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单个元素超过64byte时，改为hashtable")]),t._v("\nhash"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ziplist"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("\n")])])]),s("h2",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" set")]),t._v(" "),s("p",[t._v("下面两个条件任意满足一个时，底层是hashtable:")]),t._v(" "),s("ul",[s("li",[t._v("元素个数大于set-max-intset-entries")]),t._v(" "),s("li",[t._v("元素无法用整型表示")])]),t._v(" "),s("p",[t._v("否则使用inset")]),t._v(" "),s("h3",{attrs:{id:"inset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inset"}},[t._v("#")]),t._v(" inset")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC_INT16")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int16_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC_INT32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("define")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token macro-name"}},[t._v("INTSET_ENC_INT64")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token expression"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int64_t")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("intset")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" encoding"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编码。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("uint32_t")]),t._v(" length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组长度。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int8_t")]),t._v(" contents"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整数值数值。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" intset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("根据插入数值大小，决定contents数组的encoding格式。编码格式分别有int16_t，int32_t，int64_t。以最大的数值为准，如果最大的数值是int64_t那么数组的每个元素都是int64_t，contents还是一个有序的数组；优点是统一简单，提高数组查找效率——源码实现是通过二分法查找。如果数组不同数值用不同的编码存储，就很难用二分法查找了（这也是为什么使用inset的原因），只能使用hashtable来提高查询效率；\n但是这样做一方面提高了查找效率，另一方面也会导致内存浪费，如果所有数据中，只有一个数据是int64_t，其它数据都是int16_t，整个数组都以int64_t存储，显然会造成内存浪费")]),t._v(" "),s("h2",{attrs:{id:"zset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[t._v("#")]),t._v(" zset")]),t._v(" "),s("p",[t._v("底层数据结构为hashtable + 跳表；当数据量比较少是，用ziplist")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 元素个数超过128，使用跳表")]),t._v("\nzset"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ziplist"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("entries "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单个元素大小超过64byte，使用跳表")]),t._v("\nzset"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ziplist"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1612097237983-383c0253-79e7-4797-ade8-9478180d348f.png#height=200&id=MobTN&name=image.png&originHeight=200&originWidth=918&originalType=binary&ratio=1&size=33057&status=done&style=none&width=918",alt:"image.png"}})]),t._v(" "),s("h3",{attrs:{id:"skiplist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#skiplist"}},[t._v("#")]),t._v(" skiplist")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1612146074435-0dde4530-ec25-4789-b1dc-d7f4dc8e4caa.png#height=268&id=LJnTb&name=image.png&originHeight=268&originWidth=1142&originalType=binary&ratio=1&size=122051&status=done&style=none&width=1142",alt:"image.png"}})]),t._v(" "),s("p",[t._v("想快速找到上图链表中的 10 这个元素，只能从头开始遍历链表，直到找到我们需要找的元素。查找路径：1、3、4、5、7、8、9、10。这样的查找效率很低，平均时间复杂度很高O(n)；那有没有办法提高链表的查找速度呢？如下图所示，我们从链表中每两个元素抽出来，加一级索引，一级索引指向了原始链表，即：通过一级索引 7 的down指针可以找到原始链表的 7 。那现在怎么查找 10 这个元素呢")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1612146155740-f8c996de-8509-48c6-91b6-fb6162483875.png#height=486&id=W47Le&name=image.png&originHeight=486&originWidth=1142&originalType=binary&ratio=1&size=241635&status=done&style=none&width=1142",alt:"image.png"}})]),t._v(" "),s("p",[t._v("先在索引找 1、4、7、9，遍历到一级索引的 9 时，发现 9 的后继节点是 13，比 10 大，于是不往后找了，而是通过 9 找到原始链表的 9，然后再往后遍历找到了我们要找的 10，遍历结束。有没有发现，加了一级索引后，查找路径：1、4、7、9、10，查找节点需要遍历的元素相对少了，我们不需要对 10 之前的所有数据都遍历，查找的效率提升了；那如果加二级索引呢？如下图所示，查找路径：1、7、9、10。是不是找 10 的效率更高了？这就是跳表的思想，用“空间换时间”，通过给链表建立索引，提高了查找的效率")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1612146221295-341ec8d9-0c69-422b-9bc7-8e1cfd639a5a.png#height=663&id=r9OD1&name=image.png&originHeight=663&originWidth=1142&originalType=binary&ratio=1&size=311744&status=done&style=none&width=1142",alt:"image.png"}})]),t._v(" "),s("p",[t._v("跳表查询、插入、删除的时间复杂度为O(log n)")]),t._v(" "),s("h3",{attrs:{id:"为什么选择跳表而不是红黑树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择跳表而不是红黑树"}},[t._v("#")]),t._v(" 为什么选择跳表而不是红黑树")]),t._v(" "),s("p",[t._v("按照区间来查找数据这个操作，红黑树的效率没有跳表高。按照区间查找数据时，跳表可以做到O(logn)的时间复杂度定位区间的起点，然后在原始链表中顺序往后遍历就可以了，非常高效；对于树而言，要取同一层级的元素还是比较复杂的")]),t._v(" "),s("h3",{attrs:{id:"跳表的随机层数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跳表的随机层数"}},[t._v("#")]),t._v(" 跳表的随机层数")]),t._v(" "),s("p",[s("em",[t._v("1.6.1 每一层链表的节点个数，是下面一层的节点个数的一半，这样查找过程就非常类似于一个二分查找；这种方法在插入数据的时候有很大的问题。新插入一个节点之后，就会打乱上下相邻两层链表上节点个数严格的 2:1 的对应关系。如果要维持这种对应关系，就必须把新插入的节点后面的所有节点重新进行调整")])]),t._v(" "),s("p",[s("em",[t._v("skiplist 为了避免这一问题，它不要求上下相邻两层链表之间的节点个数有严格的对应关系，而是 为每个节点随机出一个层数(level)。比如，一个节点随机出的层数是 3，那么就把它链入到第 1 层到第 3 层这三层链表中。为了表达清楚，下图展示了如何通过一步步的插入操作从而形成一个 skiplist 的过程：")]),t._v(" "),s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1624522630579-ffddee08-7c4e-43a7-b384-e9fcad6789a1.png#clientId=uf7c452c2-cba3-4&from=ui&id=ufb8b158e&name=aaa.png&originHeight=1740&originWidth=1240&originalType=binary&ratio=1&size=943046&status=done&style=none&taskId=u661e09f9-63fb-4491-8e55-957ed7dc966",alt:"aaa.png"}}),t._v(" "),s("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1624522639558-ee18efdd-45de-46a9-9020-30a2ef7c5ecb.png#clientId=uf7c452c2-cba3-4&from=ui&id=uf1b94c29&name=bb.png&originHeight=443&originWidth=1240&originalType=binary&ratio=1&size=241206&status=done&style=none&taskId=u52eb49b9-fd48-41ce-9e8f-f0c30ed0bc8",alt:"bb.png"}})]),t._v(" "),s("p",[t._v("参考：")]),t._v(" "),s("ol",[s("li",[s("a",{attrs:{href:"https://www.yuque.com/javadu/mid/gl46we?view=doc_embed",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis从入门到高可用分布式实践"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.yuque.com/javadu/mid/kc36fc?view=doc_embed",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis从入门到高可用分布式实践(sentinel和Cluster)"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1cZ4y1N7Zc?p=4",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis6.0底层源码设计原理与核心数据结构详解"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV1o5411b7QJ?p=3",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis中有哪些数据结构及底层实现原理"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);