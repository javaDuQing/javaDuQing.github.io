(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{412:function(e,a,t){"use strict";t.r(a);var r=t(2),i=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"什么是-zab-协议-zab-协议介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-zab-协议-zab-协议介绍"}},[e._v("#")]),e._v(" 什么是 ZAB 协议？ ZAB 协议介绍")]),e._v(" "),a("blockquote",[a("p",[e._v("ZAB 协议全称：Zookeeper Atomic Broadcast（Zookeeper 原子广播协议）。")])]),e._v(" "),a("ul",[a("li",[e._v("Zookeeper 是一个为分布式应用提供高效且可靠的分布式协调服务")]),e._v(" "),a("li",[e._v("ZAB 协议定义：ZAB 协议是为分布式协调服务 Zookeeper 专门设计的一种支持 崩溃恢复 和 原子广播 协议。下面我们会重点讲这两个东西。")]),e._v(" "),a("li",[e._v("基于该协议，Zookeeper 实现了一种 主备模式 的系统架构来保持集群中各个副本之间数据一致性。具体如下图所示：")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676269432288-b0b4bea4-31cd-4844-a36b-d31a2aa4ad77.png#averageHue=%23fcf7f2&clientId=ubda85d54-f7ee-4&from=paste&height=250&id=u94275e76&name=image.png&originHeight=499&originWidth=768&originalType=binary&ratio=2&rotation=0&showTitle=false&size=44817&status=done&style=none&taskId=uf2e55544-6335-4ac1-b92f-c67e18fe5ec&title=&width=384",alt:"image.png"}})]),e._v(" "),a("p",[e._v("上图显示了 Zookeeper 如何处理集群中的数据。所有客户端写入数据都是写入到 主进程（称为 Leader）中，然后，由 Leader 复制到备份进程（称为 Follower）中。从而保证数据一致性。从设计上看，和 Raft 类似。")]),e._v(" "),a("ul",[a("li",[e._v("那么复制过程又是如何的呢？复制过程类似 2PC，ZAB 只需要 Follower 有一半以上返回 Ack 信息就可以执行提交，大大减小了同步阻塞。也提高了可用性。")])]),e._v(" "),a("p",[e._v("简单介绍完，开始重点介绍 消息广播 和 崩溃恢复。整个 Zookeeper 就是在这两个模式之间切换。 简而言之，当 Leader 服务可以正常使用，就进入消息广播模式，当 Leader 不可用时，则进入崩溃恢复模式。")]),e._v(" "),a("h2",{attrs:{id:"消息广播"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息广播"}},[e._v("#")]),e._v(" 消息广播")]),e._v(" "),a("p",[e._v("ZAB 协议的消息广播过程使用的是一个原子广播协议，类似一个 二阶段提交过程。对于客户端发送的写请求，全部由 Leader 接收，Leader 将请求封装成一个事务 Proposal，将其发送给所有 Follwer ，然后，根据所有 Follwer 的反馈，如果超过半数成功响应，则执行 commit 操作（先提交自己，再发送 commit 给所有 Follwer）。\n基本上，整个广播流程分为 3 步骤：\n1.将数据都复制到 Follwer 中")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676273225755-1c94f053-578b-4868-893b-f85a865afcd0.png#averageHue=%23fcf4ed&clientId=u75d767c3-dd0e-4&from=paste&height=176&id=u26e2b4f0&name=image.png&originHeight=352&originWidth=711&originalType=binary&ratio=2&rotation=0&showTitle=false&size=30596&status=done&style=none&taskId=u54ce7e37-8bc0-4ad1-8d59-a3cc261f320&title=&width=355.5",alt:"image.png"}})]),e._v(" "),a("p",[e._v("等待 Follwer 回应 Ack，最低超过半数即成功")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676273236417-54939fdb-f069-4f72-bd4f-bcb8770baa96.png#averageHue=%23fdf0eb&clientId=u75d767c3-dd0e-4&from=paste&height=201&id=u21b25581&name=image.png&originHeight=402&originWidth=720&originalType=binary&ratio=2&rotation=0&showTitle=false&size=41405&status=done&style=none&taskId=u468f6c5d-15e6-4299-a0b0-7b49c6c36a0&title=&width=360",alt:"image.png"}})]),e._v(" "),a("p",[e._v("当超过半数成功回应，则执行 commit ，同时提交自己")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676273247519-f5c81e6e-ee14-40b2-9b8f-e7ed556b005d.png#averageHue=%23fdf0ec&clientId=u75d767c3-dd0e-4&from=paste&height=191&id=u7b380326&name=image.png&originHeight=381&originWidth=727&originalType=binary&ratio=2&rotation=0&showTitle=false&size=37184&status=done&style=none&taskId=ud2044394-8b96-44c6-9413-a562637e39e&title=&width=363.5",alt:"image.png"}})]),e._v(" "),a("p",[e._v("通过以上 3 个步骤，就能够保持集群之间数据的一致性。实际上，在 Leader 和 Follwer 之间还有一个消息队列，用来解耦他们之间的耦合，避免同步，实现异步解耦。")]),e._v(" "),a("p",[e._v("还有一些细节：")]),e._v(" "),a("ul",[a("li",[e._v("Leader 在收到客户端请求之后，会将这个请求封装成一个事务，并给这个事务分配一个全局递增的唯一 ID，称为事务ID（ZXID），ZAB 协议需要保证事务的顺序，因此必须将每一个事务按照 ZXID 进行先后排序然后处理。")]),e._v(" "),a("li",[e._v("在 Leader 和 Follwer 之间还有一个消息队列，用来解耦他们之间的耦合，解除同步阻塞。")]),e._v(" "),a("li",[e._v("zookeeper 集群中为保证任何所有进程能够有序的顺序执行，只能是 Leader 服务器接受写请求，即使是 Follower 服务器接受到客户端的请求，也会转发到 Leader 服务器进行处理。")]),e._v(" "),a("li",[e._v("实际上，这是一种简化版本的 2PC，不能解决单点问题。等会我们会讲述 ZAB 如何解决单点问题（即 Leader 崩溃问题）。")])]),e._v(" "),a("h2",{attrs:{id:"崩溃恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#崩溃恢复"}},[e._v("#")]),e._v(" 崩溃恢复")]),e._v(" "),a("p",[e._v("刚刚我们说消息广播过程中，Leader 崩溃怎么办？还能保证数据一致吗？如果 Leader 先本地提交了，然后 commit 请求没有发送出去，怎么办？\n实际上，当 Leader 崩溃，即进入我们开头所说的崩溃恢复模式（崩溃即：Leader 失去与过半 Follwer 的联系）。下面来详细讲述。")]),e._v(" "),a("ul",[a("li",[e._v("假设1：Leader 在复制数据给所有 Follwer 之后崩溃，怎么办？")]),e._v(" "),a("li",[e._v("假设2：Leader 在收到 Ack 并提交了自己，同时发送了部分 commit 出去之后崩溃怎么办？")])]),e._v(" "),a("p",[e._v("针对这些问题，ZAB 定义了 2 个原则：")]),e._v(" "),a("ul",[a("li",[e._v("ZAB 协议确保那些已经在 Leader 提交的事务最终会被所有服务器提交。")]),e._v(" "),a("li",[e._v("ZAB 协议确保丢弃那些只在 Leader 提出/复制，但没有提交的事务。")])]),e._v(" "),a("p",[e._v("所以，ZAB 设计了下面这样一个选举算法："),a("strong",[e._v("能够确保提交已经被 Leader 提交的事务，同时丢弃已经被跳过的事务")]),e._v("。")]),e._v(" "),a("p",[e._v("针对这个要求，如果让 Leader 选举算法能够保证新选举出来的 Leader 服务器拥有集群总所有机器编号（即 ZXID 最大）的事务，那么就能够保证这个新选举出来的 Leader 一定具有所有已经提交的提案。")]),e._v(" "),a("blockquote",[a("p",[e._v("而且这么做有一个好处是："),a("strong",[e._v("可以省去 Leader 服务器检查事务的提交和丢弃工作的这一步操作")]),e._v("。")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676273428763-2a9c565a-0887-4bd6-beb9-4fbb9ae6fd8d.png#averageHue=%23fbeae2&clientId=u75d767c3-dd0e-4&from=paste&height=109&id=ubfbe775b&name=image.png&originHeight=218&originWidth=785&originalType=binary&ratio=2&rotation=0&showTitle=false&size=28916&status=done&style=none&taskId=ub5e3cf7f-5b2d-4238-b3dd-0c3f69e39ab&title=&width=392.5",alt:"image.png"}})]),e._v(" "),a("p",[e._v("这样，我们刚刚假设的两个问题便能够解决。假设 1 最终会丢弃调用没有提交的数据，假设 2 最终会同步所有服务器的数据。这个时候，就引出了一个问题，如何同步？")]),e._v(" "),a("h2",{attrs:{id:"数据同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据同步"}},[e._v("#")]),e._v(" 数据同步")]),e._v(" "),a("p",[e._v("当崩溃恢复之后，需要在正式工作之前（接收客户端请求），Leader 服务器首先确认事务是否都已经被过半的 Follwer 提交了，即是否完成了数据同步。目的是为了保持数据一致。")]),e._v(" "),a("p",[e._v("当所有的 Follwer 服务器都成功同步之后，Leader 会将这些服务器加入到可用服务器列表中。")]),e._v(" "),a("p",[e._v("实际上，Leader 服务器处理或丢弃事务都是依赖着 ZXID 的，那么这个 ZXID 如何生成呢？")]),e._v(" "),a("p",[e._v("答：在 ZAB 协议的事务编号 ZXID 设计中，ZXID 是一个 64 位的数字，其中低 32 位可以看作是一个简单的递增的计数器，针对客户端的每一个事务请求，Leader 都会产生一个新的事务 Proposal 并对该计数器进行 + 1 操作。")]),e._v(" "),a("p",[e._v("而高 32 位则代表了 Leader 服务器上取出本地日志中最大事务 Proposal 的 ZXID，并从该 ZXID 中解析出对应的 epoch 值，然后再对这个值加一。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676273604706-7ef5f97d-4901-45cf-b9bb-a79626a359e5.png#averageHue=%23faeaea&clientId=u75d767c3-dd0e-4&from=paste&height=128&id=u8fe531be&name=image.png&originHeight=255&originWidth=523&originalType=binary&ratio=2&rotation=0&showTitle=false&size=12942&status=done&style=none&taskId=u489f295a-c21f-47f1-9c8c-0794b773cca&title=&width=261.5",alt:"image.png"}})]),e._v(" "),a("p",[e._v("高 32 位代表了每代 Leader 的唯一性，低 32 代表了每代 Leader 中事务的唯一性。同时，也能让 Follwer 通过高 32 位识别不同的 Leader。简化了数据恢复流程。")]),e._v(" "),a("p",[e._v("基于这样的策略：当 Follower 链接上 Leader 之后，Leader 服务器会根据自己服务器上最后被提交的 ZXID 和 Follower 上的 ZXID 进行比对，比对结果要么回滚，要么和 Leader 同步。")]),e._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考：")]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://www.pdai.tech/md/algorithm/alg-domain-distribute-x-zab.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.pdai.tech/md/algorithm/alg-domain-distribute-x-zab.html"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("https://www.cnblogs.com/stateis0/p/9062133.html")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/stateis0/p/9062133.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/stateis0/p/9062133.html"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=i.exports}}]);