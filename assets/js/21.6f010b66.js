(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{418:function(e,t,a){"use strict";a.r(t);var i=a(2),s=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-限流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-限流"}},[e._v("#")]),e._v(" 1 限流")]),e._v(" "),t("p",[t("em",[e._v("限流是针对服务请求数量的一种自我保护机制，当请求数量超出服务的处理能力时，会自动丢弃新来的请求")])]),e._v(" "),t("p",[t("em",[e._v("为什么要限流：")]),e._v(" "),t("em",[e._v("任何一个服务的处理能力都是有极限的，假定服务A的处理能力为QPS = 100，当QPS < 100时服务A可以提供正常的服务。当QPS > 100时，由于请求量增大，会出现争抢服务资源的情况（数据库连接、CPU、内存等），导致服务A处理缓慢；当QPS继续增大时，可能会造成服务A响应更加缓慢甚至奔溃。如果不进行限流控制，服务A始终会面临着被大流量冲击的风险。做好系统请求流量的评估，制定合理的限流策略，是我们进行系统高可用保护的第一步")])]),e._v(" "),t("p",[t("em",[e._v("有两种方式：")])]),e._v(" "),t("ol",[t("li",[t("em",[e._v("请求，可以以用户为维度，对于一个URL（例如：wms/goods/section/export）,每个用户1分钟内只能访问5次，否则就报错（计数器法、也是固定时间窗口法）")])]),e._v(" "),t("li",[t("em",[e._v("对于RPC调用，例如：a，b都需要调用c服务，c服务可以释放令牌，拿到令牌的才可以访问")])])]),e._v(" "),t("h3",{attrs:{id:"_1-1-滑动窗口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-滑动窗口"}},[e._v("#")]),e._v(" 1.1 滑动窗口")]),e._v(" "),t("h4",{attrs:{id:"_1-1-1-固定时间窗口-又称计数器法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-固定时间窗口-又称计数器法"}},[e._v("#")]),e._v(" 1.1.1 固定时间窗口（又称计数器法）")]),e._v(" "),t("p",[t("em",[e._v("步骤如下：")])]),e._v(" "),t("ol",[t("li",[t("em",[e._v("先确定一个起始时间点，一般就是系统启动的时间")])]),e._v(" "),t("li",[t("em",[e._v("从起始时间点开始，根据我们的需求，设置一个最大值M，开始接受请求并从0开始为请求计数")])]),e._v(" "),t("li",[t("em",[e._v("在时间段T内，请求计数超过M时，拒绝所有剩下的请求")])]),e._v(" "),t("li",[t("em",[e._v("超过时间段T后，重置计数")])])]),e._v(" "),t("p",[t("em",[e._v("问题：假设我们的时间段T是1秒，请求最大值是10，在第一秒内，请求数量分布是第500毫秒时有1个请求，第800毫秒时有9个请求，如图所示：")]),e._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1627547953043-e78f99b3-1209-4729-b28f-800b0bedcd07.png#clientId=u323bdee4-3946-4&from=paste&id=ude9d1f77&name=image.png&originHeight=155&originWidth=656&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16037&status=done&style=none&taskId=u45178085-e0a5-4e41-87ac-8c9adf2503e&title=",alt:"image.png"}}),e._v(" "),t("em",[e._v("这是对于第一秒而言，这个请求分布是合理的\n此时第二秒的第200毫秒（即两秒中的第1200毫秒）内，又来了10个请求，如图所示：")]),e._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1627548001367-361ace58-0207-48d5-adfd-c8c7ebc245af.png#clientId=u323bdee4-3946-4&from=paste&height=149&id=u32f1383d&name=image.png&originHeight=149&originWidth=673&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13396&status=done&style=none&taskId=ud2aeb279-7639-4961-8ae6-bdbf3772567&title=&width=673",alt:"image.png"}}),e._v(" "),t("em",[e._v("单独看第二秒依然是合理的，但是两个时间段连在一起的时候，就出现了问题，如图所示：")]),e._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1627548026633-f77ee9d2-bbb2-421d-99fc-7825ee7f2ac3.png#clientId=u323bdee4-3946-4&from=paste&height=112&id=u4382621a&name=image.png&originHeight=112&originWidth=848&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15644&status=done&style=none&taskId=ub9dcacdf-9243-4588-9b60-23271193f3d&title=&width=848",alt:"image.png"}}),e._v(" "),t("em",[e._v("临界问题：")]),e._v(" "),t("em",[e._v("从500毫秒到1200毫秒，短短700毫秒的时间内后端服务器就接收了20个请求，这显然违背了一开始我们希望1秒最多10个的初衷。这种远远大于预期流量的流量加到后端服务器头上，是会造成不可预料的后果的。因此，人们改进了固定窗口的算法，将其改为检查任何一个时间段都不超过请求数量阈值的时间窗口算法：滑动时间窗口算法")])]),e._v(" "),t("h4",{attrs:{id:"_1-1-2-滑动时间窗口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-滑动时间窗口"}},[e._v("#")]),e._v(" 1.1.2 滑动时间窗口")]),e._v(" "),t("p",[t("em",[e._v("它将单位时间周期分为n个小周期，分别记录每个小周期内接口的访问次数，并且根据时间滑动删除过期的小周期")]),e._v(" "),t("em",[e._v("假设单位时间是1s，滑动窗口算法把它划分为2个小周期，也就是滑动窗口（单位时间）被划分为2个小格子。每格表示0.5s。每过0.5s，时间窗口就会往右滑动一格，如图：")]),e._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/jpeg/375413/1627557177182-a3539e04-d3a1-4696-85a4-5e64bbbcfb6a.jpeg",alt:""}})]),e._v(" "),t("p",[t("em",[e._v("我们来看下滑动窗口是如何解决临界问题的？")]),e._v(" "),t("em",[e._v("假设我们1s内的限流阀值还是5个请求，比如0.9s（窗口范围0.5s~1s）的时候来了5个请求，落在黄色格子里。1.3s（窗口范围1s～2s）这个点，又来5个请求，落在紫色格子里。这个窗口范围的请求已经超过限定的5了，已触发限流啦，实际上，紫色格子的请求都被拒绝了")])]),e._v(" "),t("p",[t("em",[e._v("缺点：")])]),e._v(" "),t("ol",[t("li",[t("em",[e._v("滑动窗口每移动一个格子，就淘汰一个格子里的请求数量，格子越大淘汰的请求数量越多，就可以接收的请求越多，不够平滑；例如：0.1s有5个请求，那么0.1s~0.5s内都不能接受请求；分的格子越多越平滑，但是管理起来越麻烦，而且不确定到底要划分几个格子")])])]),e._v(" "),t("h3",{attrs:{id:"_1-2-令牌桶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-令牌桶"}},[e._v("#")]),e._v(" 1.2 令牌桶")]),e._v(" "),t("p",[t("em",[e._v("令牌桶（token bucket）算法，指的是设计一个容器（即“桶”），由某个组件持续运行往该容器中添加令牌（token），令牌可以是简单的数字、字符或组合，也可以仅仅是一个计数，然后每个请求进入系统时，需要从桶中领取一个令牌，所有请求都必须有令牌才能进入后端系统。当令牌桶空时，拒绝请求；当令牌桶满时，不再往其中添加新的令牌，架构图如下：")]),e._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1627545766365-93545bac-8e57-4fc3-84ac-0bf83de123a3.png#clientId=u12e47552-e70b-4&from=paste&height=451&id=u0e14c01a&name=image.png&originHeight=451&originWidth=717&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60805&status=done&style=none&taskId=u2b862fcd-7d8c-4b53-a404-bb6bfce8b06&title=&width=717",alt:"image.png"}}),e._v(" "),t("em",[e._v("实现逻辑：")])]),e._v(" "),t("ol",[t("li",[t("em",[e._v("假设是T秒内允许N个请求，那么令牌桶算法则会使令牌添加组件每T秒往令牌桶中添加N个令牌")])]),e._v(" "),t("li",[t("em",[e._v("其次，令牌桶需要有一个最大值M，当令牌添加组件检测到令牌桶中已经有M个令牌时，剩余的令牌会被丢弃。反映到限流系统中，可以认为是当前系统允许的瞬时最大流量，但不是持续最大流量。例如令牌桶中的令牌最大数量是100个，每秒钟会往其中添加10个新令牌，当令牌满的时候，突然出现100 TPS的流量，这时候是可以承受的，但是假如连续两秒的100 TPS流量就不行，因为令牌添加速度是一秒10个，添加速度跟不上使用速度")])])]),e._v(" "),t("p",[t("em",[e._v("缺点/也是优点：")])]),e._v(" "),t("ol",[t("li",[t("em",[e._v("（缺点）大量令牌累积会导致“伪限流失效”现象，回导致后端处理请求剧增")])]),e._v(" "),t("li",[t("em",[e._v("（优点）能处理突发的请求")])])]),e._v(" "),t("h3",{attrs:{id:"_1-3-漏桶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-漏桶"}},[e._v("#")]),e._v(" 1.3 漏桶")]),e._v(" "),t("ol",[t("li",[t("em",[e._v("是令牌桶的一种改进")])]),e._v(" "),t("li",[t("em",[e._v("将请求看作水流，用一个底下有洞的桶盛装，底下的洞漏出水的速率是恒定的，所有请求进入系统的时候都会先进入这个桶，并慢慢由桶流出交给后台服务。桶有一个固定大小，当水流量超过这个大小的时候，多余的请求都会被丢弃")])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1627547132415-ef2c306b-a24b-403e-8656-f40ae9238da1.png#clientId=ub5e88a1c-6453-4&from=paste&height=638&id=ubb3e62ec&name=image.png&originHeight=638&originWidth=399&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79069&status=done&style=none&taskId=ucc3c8251-8c6e-4fb0-b5db-f2bb929d2a0&title=&width=399",alt:"image.png"}}),e._v(" "),t("em",[e._v("漏桶算法和令牌桶算法在思想上非常接近，它们有如下的相同和不同之处：")])]),e._v(" "),t("ol",[t("li",[t("em",[e._v("令牌桶算法以固定速率补充可以转发的请求数量（令牌），而漏桶算法以固定速率转发请求")])]),e._v(" "),t("li",[t("em",[e._v("令牌桶算法在有爆发式增长的流量时可以一定程度上接受，漏桶算法也是，但当流量爆发时，令牌桶算法会使业务服务器直接承担这种流量，而漏桶算法的业务服务器感受到的是一样的速率变化")])])]),e._v(" "),t("h2",{attrs:{id:"_2-降级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-降级"}},[e._v("#")]),e._v(" 2 降级")]),e._v(" "),t("ol",[t("li",[t("em",[e._v("降级是通过开关配置将某些不重要的业务功能屏蔽掉，以提高服务处理能力。在大促场景中经常会对某些服务进行降级处理，大促结束之后再进行复原")])]),e._v(" "),t("li",[t("em",[e._v("例如缓存服务挂掉之后，降级使用内存作为缓存")])])]),e._v(" "),t("p",[t("em",[e._v("为什么要降级：\n在不影响业务核心链路的情况下，屏蔽某些不重要的业务功能，可以节省系统的处理时间，提供系统的响应能力，在服务器资源固定的前提下处理更多的请求")])]),e._v(" "),t("h2",{attrs:{id:"_3-熔断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-熔断"}},[e._v("#")]),e._v(" 3 熔断")]),e._v(" "),t("p",[t("em",[e._v("在服务的依赖调用中，被调用方出现故障时，出于自我保护的目的，调用方会主动停止调用，并根据业务需要进行相应处理。调用方这种主动停止调用的行为我们称之为熔断")]),e._v(" "),t("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2021/png/375413/1627540449176-0c599c74-05c6-4657-bf0e-52fc6b44df6b.png#clientId=u0328c0e0-9a62-4&from=paste&height=346&id=u20565850&name=image.png&originHeight=346&originWidth=522&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17254&status=done&style=none&taskId=ua499e834-35cb-4a95-810d-f3e681f28c1&title=&width=522",alt:"image.png"}}),e._v(" "),t("em",[e._v("为什么要熔断：（防雪崩）")]),e._v(" "),t("em",[e._v("为什么要熔断假定服务A依赖服务B，当服务B处于正常状态，整个调用是健康的，服务A可以得到服务B的正常响应。当服务B出现故障时，比如响应缓慢或者响应超时，如果服务A继续请求服务B，那么服务A的响应时间也会增加，进而导致服务A响应缓慢。如果服务A不进行熔断处理，服务B的故障会传导至服务A，最终导致服务A也不可用")])]),e._v(" "),t("h2",{attrs:{id:"_4-资源隔离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-资源隔离"}},[e._v("#")]),e._v(" 4 资源隔离")]),e._v(" "),t("p",[t("em",[e._v("在故障的情况下，不会耗尽系统所有的资源")])])])}),[],!1,null,null,null);t.default=s.exports}}]);