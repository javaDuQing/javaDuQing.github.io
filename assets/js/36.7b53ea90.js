(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{434:function(_,v,t){"use strict";t.r(v);var e=t(2),s=Object(e.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"_1-同城灾备"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-同城灾备"}},[_._v("#")]),_._v(" 1 同城灾备")]),_._v(" "),v("p",[v("em",[_._v("最初，我们把应用只放在一个机器上，那么当这个服务器down机了，我们的应用便不可用了。 所以，我们考虑把我们的应用放在多个机器上，在公司单独开辟一个机房来放置这些机器，这样单独某一个台机器down机了并不影响我们的应用。 但是，如果你们公司某一天停电了呢？这个时候我们就考虑在这座城市的另外一个地方在放置一个机房，这是应用就被部署在了同城的两个机房；这个叫"),v("strong",[_._v("同城灾备")])])]),_._v(" "),v("h2",{attrs:{id:"_2-异地灾备"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-异地灾备"}},[_._v("#")]),_._v(" 2 异地灾备")]),_._v(" "),v("p",[v("em",[_._v("如果你们城市某一天经历了海啸、台风、地震等自然灾害，两个机房都不能使用了，这个时候我们就会考虑在另外一个城市再搭建一个机房来部署我们的应用，这样我们应用的可用性就更高了（这个叫"),v("strong",[_._v("异地灾备")]),_._v("）。 好，到此为止不管出现什么样的状况，我们的应用基本上都可用")]),_._v(" "),v("em",[_._v("当主机房停电后，用户会去请求北京备份机房，当北京备份机房也停电后，用户会去请求上海备份机房。 好，对于这个架构，我们刚刚说只有主机房能对外提供服务，另外两个机房都只是作为容灾的备份，那么也就是说备份机房利用率不高")])]),_._v(" "),v("h2",{attrs:{id:"_3-同城双活"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-同城双活"}},[_._v("#")]),_._v(" 3 同城双活")]),_._v(" "),v("h2",{attrs:{id:"_4-两地三中心"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-两地三中心"}},[_._v("#")]),_._v(" 4 两地三中心")]),_._v(" "),v("p",[v("em",[_._v("我们可以让北京的备份机房也去接收部分业务请求，只是这些请求可以没那么重要，比如一些读请求，而上海的备份机房不去接收请求，还是单纯作为容灾备份机器；这个就叫"),v("strong",[_._v("两地三中心")])]),_._v(" "),v("em",[v("strong",[_._v("有些资料这样说两地三中心（同城双活 + 异地灾备）：")])])]),_._v(" "),v("h2",{attrs:{id:"_5-三地五中心"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-三地五中心"}},[_._v("#")]),_._v(" 5 三地五中心")]),_._v(" "),v("p",[v("em",[_._v("两地三中心这种架构具备容灾能力，比如生产数据中心停电了，那么可以把所有流量都切到同城灾备中心或异地灾备中心，那么现在的问题是假如真到了停电的那一天，你敢把所有的流量都切到灾备中心去吗？ 灾备中心它主要的功能是作为生产数据中心的一个备份，所以它并没有如同生产数据中心一样不停的在对外提供服务；就算让备份的机器顶上，肯定也需要修改很多配置，要花费很长时间，来看下面的这个架构，"),v("strong",[_._v("同城双活 + 异地多活")]),_._v("：")]),_._v(" "),v("em",[_._v("可以看到上面的架构图：")])]),_._v(" "),v("ul",[v("li",[v("em",[_._v("不再区分生产数据中心和灾备数据中心，只有数据中心，而且数据中心之间相互备份数据，保证每个数据中心都是全量数据")])]),_._v(" "),v("li",[v("em",[_._v("用户可以在任意一个数据中心上进行读写操作")])])]),_._v(" "),v("p",[v("em",[_._v("首先我们不管这种架构能不能实现，至少它的好处是非常明显的：")])]),_._v(" "),v("ol",[v("li",[v("em",[_._v("每个数据中心一直在对外提供服务（不是一个新手），所以当一个数据中心停电后，直接把用户流量切到另外一个数据中心也是问题不大的。")])]),_._v(" "),v("li",[v("em",[_._v("用户可以就近访问数据中心，这样用户的体验更好，并且整个架构的流量也比较平均")])])]),_._v(" "),v("p",[v("em",[_._v("这种架构实现起来最重要的一点就是：用户同时向不同数据中心写入数据，数据中心双向同步数据时，如果出现冲突该如何解决？ 这个问题，目前阿里和蚂蚁金服的解决办法是：将用户按某一个规则进行分组，每组用户写入数据时只能写入到指定的数据中心，相当于用户与数据中心绑定在一起了，这样保证了数据中心在双向同步之前数据是不会冲突的，因为按用户分组了，不同用户的数据不会冲突")])]),_._v(" "),v("p",[v("em",[_._v("用户使用网站时，由运营商网络或CDN选择最近的机房，机房内部署一个负载均衡，由这个负载均衡最终判断用户属于机房（前文中的数据中心），也就是可能出现，用户在注册时在北京，那么他的uid就和北京某个机房绑定了，那么当这个用户在上海使用时，会由上海的负载均衡按照用户分组规则将请求转发到北京绑定的那个机房去")])]),_._v(" "),v("p",[v("em",[_._v("这个架构中最重要的其实就是用户分组，所以包括我们的应用程序、数据库负载均衡、数据库分表等等都需要按用户进行分组，我们要保证针对同一个用户的请求与操作都在同一个机房内，不去跨机房，这样才是最快的，这就是单元化")])]),_._v(" "),v("p",[v("em",[_._v("上面这个架构实际上就是一个高级版的“两地三中心”，只是这种单元化架构我们可以任意去扩展，比如你在上海在增加一个数据中心，在杭州也增加一个，那么就如下图：")]),_._v(" "),v("em",[_._v("这就叫"),v("strong",[_._v("三地五中心")])])])])}),[],!1,null,null,null);v.default=s.exports}}]);