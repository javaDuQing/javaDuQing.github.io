(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{414:function(e,a,t){"use strict";t.r(a);var i=t(2),r=Object(i.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("img",{attrs:{width:"400",height:"353",align:"bottom",src:"https://cdn.nlark.com/yuque/0/2023/jpeg/375413/1676268430788-5376fe0e-c6e9-4801-a3bd-cd41fc42c027.jpeg"}}),e._v(" "),a("p",[e._v("Raft 实现了和 multi Paxos 相同的功能，它将一致性分解为多个子问题：Leader 选举（Leader election）、日志同步（Log replication）、安全性（Safety）、日志压缩（Log compaction）、成员变更（Membership change）等")]),e._v(" "),a("h2",{attrs:{id:"角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#角色"}},[e._v("#")]),e._v(" 角色")]),e._v(" "),a("p",[e._v("Raft 将系统中的角色分为领导者（Leader）、跟从者（Follower）和候选人（Candidate）：")]),e._v(" "),a("ul",[a("li",[e._v("Leader：接受客户端请求，并向Follower同步请求日志，当日志同步到大多数节点上后告诉Follower提交日志。")]),e._v(" "),a("li",[e._v("Follower：接受并持久化Leader同步的日志，在Leader告之日志可以提交之后，提交日志。")]),e._v(" "),a("li",[e._v("Candidate：Leader选举过程中的临时角色。")])]),e._v(" "),a("img",{attrs:{width:"200",height:"213",align:"bottom",src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676112381756-72af7737-6ab8-44ab-a9aa-beeda9e7652b.png#averageHue=%23f4f4f4&clientId=u6b62e985-568c-4&from=paste&height=140&id=u1acaf576&name=image.png&originHeight=280&originWidth=262&originalType=binary&ratio=2&rotation=0&showTitle=false&size=21081&status=done&style=none&taskId=u60500858-5834-4510-9b20-757c77a8824&title=&width=131"}}),e._v(" "),a("p",[e._v("Raft 要求系统在任意时刻最多只有一个 Leader，正常工作期间只有 Leader 和 Followers。")]),e._v(" "),a("h2",{attrs:{id:"leader-选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#leader-选举"}},[e._v("#")]),e._v(" leader 选举")]),e._v(" "),a("p",[e._v("如下图所示，分别用三种图代表跟随者、候选人和领导者。")]),e._v(" "),a("img",{attrs:{width:"400",height:"163",align:"bottom",src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676256672005-1a3ba74b-1136-480e-86ee-4f19aa7c13db.png#averageHue=%23e9ecea&clientId=u3f6304e6-1ebf-4&from=paste&height=158&id=u4aee59c1&name=image.png&originHeight=296&originWidth=780&originalType=binary&ratio=1&rotation=0&showTitle=false&size=111568&status=done&style=none&taskId=uaaf8257a-4a9e-45f6-b146-b0cff1fc346&title=&width=417"}}),e._v(" "),a("p",[e._v("初始状态\n初始状态下，集群中所有节点都是跟随者的状态。\n如下图所示，有三个节点(Node) a、b、c，任期（Term）都为 0。")]),e._v(" "),a("img",{attrs:{width:"400",height:"463",align:"bottom",src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676256789496-af827339-916a-4f9b-bc6f-80a10fe78621.png#averageHue=%23fefefe&clientId=u3f6304e6-1ebf-4&from=paste&height=328&id=u04b6a945&name=image.png&originHeight=698&originWidth=679&originalType=binary&ratio=1&rotation=0&showTitle=false&size=83790&status=done&style=none&taskId=u43a011ba-4b56-4146-9f0d-056da7b96e3&title=&width=319"}}),e._v(" "),a("p",[e._v("Raft 算法实现了随机超时时间的特性，每个节点等待领导者节点心跳信息的超时时间间隔是随机的。比如 A 节点等待超时的时间间隔 150 ms，B 节点 200 ms，C 节点 300 ms。那么 a 先超时，最先因为没有等到领导者的心跳信息，发生超时。如下图所示，三个节点的超时计时器开始运行。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/webp/375413/1676256988831-8caa86f4-a76e-4523-9052-4741acb0f5bf.webp#clientId=u76ded158-d09c-4&from=ui&height=391&id=u2c4cac69&name=up-501031a7051bf405999493e07f1b284f.webp&originHeight=701&originWidth=743&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51562&status=done&style=none&taskId=u804050ca-51a3-438d-ad6a-e6cbb22ba00&title=&width=414",alt:"up-501031a7051bf405999493e07f1b284f.webp"}})]),e._v(" "),a("h3",{attrs:{id:"发起投票"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发起投票"}},[e._v("#")]),e._v(" 发起投票")]),e._v(" "),a("p",[e._v("当 A 节点的超时时间到了后，A 节点成为候选者，并增加自己的任期编号，Term 值从 0 更新为 1，并给自己投了一票。")]),e._v(" "),a("ul",[a("li",[e._v("Node A：Term = 1, Vote Count = 1。")]),e._v(" "),a("li",[e._v("Node B：Term = 0。")]),e._v(" "),a("li",[e._v("Node C：Term = 0。")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/webp/375413/1676257071631-561795bb-48cc-4eb2-baeb-09837addd22f.webp#clientId=u76ded158-d09c-4&from=ui&height=364&id=uf160c7cf&name=up-c13af5ea7014c4d3a55f926c8b3ebef0.webp&originHeight=701&originWidth=743&originalType=binary&ratio=1&rotation=0&showTitle=false&size=185386&status=done&style=none&taskId=u8d235996-410c-4644-b2cd-3170fea840b&title=&width=386",alt:"up-c13af5ea7014c4d3a55f926c8b3ebef0.webp"}})]),e._v(" "),a("h3",{attrs:{id:"成为领导者的简化过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成为领导者的简化过程"}},[e._v("#")]),e._v(" 成为领导者的简化过程")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/webp/375413/1676257158987-6fb337e0-ed93-455e-bc3b-5ef4fb36bf92.webp#clientId=u76ded158-d09c-4&from=ui&height=410&id=ub703a922&name=up-582304792322d1ae79efa9782ca28f5b.webp&originHeight=711&originWidth=750&originalType=binary&ratio=1&rotation=0&showTitle=false&size=225722&status=done&style=none&taskId=u708dd477-b2a4-4098-b1bb-bc7d502f87a&title=&width=433",alt:"up-582304792322d1ae79efa9782ca28f5b.webp"}})]),e._v(" "),a("ul",[a("li",[e._v("第一步：节点 A 成为候选者后，向其他节点发送请求投票 RPC 信息，请它们选举自己为领导者。")]),e._v(" "),a("li",[e._v("第二步：节点 B 和 节点 C 接收到节点 A 发送的请求投票信息后，在编号为 1 的这届任期内，还没有进行过投票，就把选票投给节点 A，并增加自己的任期编号。")]),e._v(" "),a("li",[e._v("第三步：节点 A 收到 3 次投票，得到了大多数节点的投票，从候选者成为本届任期内的新的领导者。")]),e._v(" "),a("li",[e._v("第四步：节点 A 作为领导者，固定的时间间隔给 节点 B 和节点 C 发送心跳信息，告诉节点 B 和 C，我是领导者，组织其他跟随者发起新的选举。")]),e._v(" "),a("li",[e._v("第五步：节点 B 和节点 C 发送响应信息给节点 A，告诉节点 A 我是正常的。")])]),e._v(" "),a("h3",{attrs:{id:"领导者的任期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#领导者的任期"}},[e._v("#")]),e._v(" 领导者的任期")]),e._v(" "),a("p",[e._v("英文单词是 term，领导者是有任期的。")]),e._v(" "),a("ul",[a("li",[e._v("自动增加：跟随者在等待领导者心跳信息超时后，推荐自己为候选人，会增加自己的任期号，如上图所示，节点 A 任期为 0，推举自己为候选人时，任期编号增加为 1。")]),e._v(" "),a("li",[e._v("更新为较大值：当节点发现自己的任期编号比其他节点小时，会更新到较大的编号值。比如节点 A 的任期为 1，请求投票，投票消息中包含了节点 A 的任期编号，且编号为 1，节点 B 收到消息后，会将自己的任期编号更新为 1。")]),e._v(" "),a("li",[e._v("恢复为跟随者：如果一个候选人或者领导者，发现自己的任期编号比其他节点小，那么它会立即恢复成跟随者状态。这种场景出现在分区错误恢复后，任期为 3 的领导者受到任期编号为 4 的心跳消息，那么前者将立即恢复成跟随者状态。")]),e._v(" "),a("li",[e._v("拒绝消息：如果一个节点接收到较小的任期编号值的请求，那么它会直接拒绝这个请求，比如任期编号为 6 的节点 A，收到任期编号为 5 的节点 B 的请求投票 RPC 消息，那么节点 A 会拒绝这个消息。")]),e._v(" "),a("li",[e._v("一个任期内，领导者一直都会领导者，直到自身出现问题（如宕机），或者网络问题（延迟），其他节点发起一轮新的选举。")]),e._v(" "),a("li",[e._v("在一次选举中，每一个服务器节点最多会对一个任期编号投出一张选票，投完了就没了。")])]),e._v(" "),a("p",[e._v("假设一个集群由 N 个节点组成，那么大多数就是至少 N/2+1。例如： 3 个节点的集群，大多数就是 2。")]),e._v(" "),a("h3",{attrs:{id:"防止多个节点同时发起投票"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#防止多个节点同时发起投票"}},[e._v("#")]),e._v(" 防止多个节点同时发起投票")]),e._v(" "),a("p",[e._v("为了防止多个节点同时发起投票，会给每个节点分配一个随机的选举超时时间。这个时间内，节点不能成为候选者，只能等到超时。比如上述例子，节点 A 先超时，先成为了候选者。这种巧妙的设计，在大多数情况下只有一个服务器节点先发起选举，而不是同时发起选举，减少了因选票瓜分导致选举失败的情况。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/webp/375413/1676257437133-18504945-645e-4f8a-acff-902f53af140f.webp#clientId=u76ded158-d09c-4&from=ui&height=357&id=u6cf7e6fb&name=up-f74d19cd8abf89e246e901938ffccaa7.webp&originHeight=701&originWidth=743&originalType=binary&ratio=1&rotation=0&showTitle=false&size=185386&status=done&style=none&taskId=u606ee302-e036-4912-a992-29ce4be6f2e&title=&width=378",alt:"up-f74d19cd8abf89e246e901938ffccaa7.webp"}})]),e._v(" "),a("h3",{attrs:{id:"触发新的一轮选举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发新的一轮选举"}},[e._v("#")]),e._v(" 触发新的一轮选举")]),e._v(" "),a("p",[e._v("如果领导者节点出现故障，则会触发新的一轮选举。如下图所示，领导者节点 B 发生故障，节点 A 和 节点 B 就会重新选举 Leader。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/webp/375413/1676257496707-f3cef321-9b48-4e56-8318-efc3bb207363.webp#clientId=u76ded158-d09c-4&from=ui&height=353&id=u37e0924c&name=up-8abd1b53818ea03d5afdf6dc362548e1.webp&originHeight=711&originWidth=750&originalType=binary&ratio=1&rotation=0&showTitle=false&size=230950&status=done&style=none&taskId=uf67b12cb-8e51-498d-a32a-278c7b398fd&title=&width=372",alt:"up-8abd1b53818ea03d5afdf6dc362548e1.webp"}})]),e._v(" "),a("ul",[a("li",[e._v("第一步 ：节点 A 发生故障，节点 B 和节点 C 没有收到领导者节点 A 的心跳信息，等待超时。")]),e._v(" "),a("li",[e._v("第二步：节点 C 先发生超时，节点 C 成为候选人。")]),e._v(" "),a("li",[e._v("第三步：节点 C 向节点 A 和 节点 B 发起请求投票信息。")]),e._v(" "),a("li",[e._v("第四步：节点 C 响应投票，将票投给了 C，而节点 A 因为发生故障了，无法响应 C 的投票请求。")]),e._v(" "),a("li",[e._v("第五步：节点 C 收到两票（大多数票数），成为领导者。")]),e._v(" "),a("li",[e._v("第六步：节点 C 向节点 A 和 B 发送心跳信息，节点 B 响应心跳信息，节点 A 不响应心跳信息。")])]),e._v(" "),a("h3",{attrs:{id:"raft-算法的几个关键机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-算法的几个关键机制"}},[e._v("#")]),e._v(" Raft 算法的几个关键机制")]),e._v(" "),a("p",[e._v("Raft 算法通过以下几个关键机制，保证了一个任期只有一位领导，极大减少了选举失败的情况。")]),e._v(" "),a("ol",[a("li",[e._v("任期")]),e._v(" "),a("li",[e._v("领导者心跳信息")]),e._v(" "),a("li",[e._v("随机选举超时时间")]),e._v(" "),a("li",[e._v("先来先服务的投票原则")]),e._v(" "),a("li",[e._v("大多数选票原则")])]),e._v(" "),a("h2",{attrs:{id:"日志复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志复制"}},[e._v("#")]),e._v(" 日志复制")]),e._v(" "),a("p",[e._v("过程如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676258835194-26738a0f-83bd-4626-b239-b84a3b44abbc.png#averageHue=%23f8f7f3&clientId=ud1cc6aa1-882e-4&from=paste&height=504&id=u89640b43&name=image.png&originHeight=504&originWidth=1422&originalType=binary&ratio=1&rotation=0&showTitle=false&size=179851&status=done&style=none&taskId=uf67b3708-7aaa-44d9-a2d8-9ec29c6b80b&title=&width=1422",alt:"image.png"}})]),e._v(" "),a("p",[e._v("直接去理解日志复制，是很容易的，客户端的一条指令到达，领导者会为这条指令创建一条日志条目，并且并行发送到其他跟随者。当日志被安全复制（所谓安全复制后面会有），领导会将日志应用到状态机（比如如果是mysql的insert，那么就是执行insert操作），然后响应客户端。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676257680687-0356cc07-ade3-45a8-98fb-6f2315693fbd.png#averageHue=%23d5d6b4&clientId=u76ded158-d09c-4&from=paste&height=958&id=u96175959&name=image.png&originHeight=958&originWidth=1284&originalType=binary&ratio=1&rotation=0&showTitle=false&size=537734&status=done&style=none&taskId=u336ad5db-84ad-402c-a248-24c71d2aff4&title=&width=1284",alt:"image.png"}})]),e._v(" "),a("p",[e._v("如上图，每条日志都会有对应的任期号，和指令。\n每个日志都会有对应的索引。")]),e._v(" "),a("h3",{attrs:{id:"raft-日志匹配特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#raft-日志匹配特性"}},[e._v("#")]),e._v(" raft 日志匹配特性")]),e._v(" "),a("ol",[a("li",[e._v("如果在不同的日志中的两个条目拥有相同的索引和任期号，那么他们存储了相同的指令。")]),e._v(" "),a("li",[e._v("如果在不同的日志中的两个条目拥有相同的索引和任期号，那么他们之前的所有日志条目也全部相同。")])]),e._v(" "),a("p",[e._v("第一点：一个任期只有一个领导人，并且领导人在一个任期中对于同一索引日志，只会创建一条日志，是不会改变的，是确定的。这就保证第一点成立。\n第二点：要想全部相同，就要保证跟随者得到的日志是领导者发送的顺序附加上去的。领导者在发送新的日志时，会附加这条日志之前日志的索引和任期号。如果跟随者发现数据匹配，才会附加上去，否则拒绝。就是一个个状态保证了日志的匹配特性。\n一般情况下follower的日志都会和leader保持一致，Leader崩溃可能会导致日志不一致，如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676257878948-58c3bd68-9e69-41c7-a15e-a00d25394e21.png#averageHue=%23efede9&clientId=u76ded158-d09c-4&from=paste&height=838&id=udab320c4&name=image.png&originHeight=838&originWidth=1214&originalType=binary&ratio=1&rotation=0&showTitle=false&size=435196&status=done&style=none&taskId=u282647f8-503e-47e5-af46-66b05079c08&title=&width=1214",alt:"image.png"}})]),e._v(" "),a("p",[e._v("如上图，对于 a-f，最终都会和 leader 同步，也就是说，d会丢弃日志。f的对应日志也会被丢弃和覆盖。")]),e._v(" "),a("h3",{attrs:{id:"那么如何去做覆盖跟随者日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#那么如何去做覆盖跟随者日志"}},[e._v("#")]),e._v(" 那么如何去做覆盖跟随者日志")]),e._v(" "),a("p",[e._v("Leader通过强制Followers复制它的日志来处理日志的不一致，Followers上的不一致的日志会被Leader的日志覆盖。")]),e._v(" "),a("p",[e._v("Leader为了使Followers的日志同自己的一致，Leader需要找到Followers同它的日志一致的地方，然后覆盖Followers在该位置之后的条目。")]),e._v(" "),a("p",[e._v("Leader会从后往前试，每次Append失败后尝试前一个日志条目，直到成功找到每个Follower的日志一致位点，然后向后逐条覆盖Followers在该位置之后的条目。")]),e._v(" "),a("h2",{attrs:{id:"安全性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全性"}},[e._v("#")]),e._v(" 安全性")]),e._v(" "),a("p",[e._v("我们明白了如何选举和日志复制，但是没有考虑安全性问题。比如一个宕机很久的跟随着会被选为领导者，进行日志覆盖操作会有丢失问题。\n"),a("strong",[e._v("Raft中节点在投票的时候，会判断被投票的候选者对应的日志是否至少和自己一样新。如果不是，则不会给该候选者投票。")]),e._v("\n日志比较的方法：")]),e._v(" "),a("ol",[a("li",[e._v("最后一条日志的任期号。如果大说明新。如果小，说明不新。如果相等。跳到2")]),e._v(" "),a("li",[e._v("判断索引长度")])]),e._v(" "),a("h2",{attrs:{id:"日志压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志压缩"}},[e._v("#")]),e._v(" 日志压缩")]),e._v(" "),a("p",[e._v("日志数据如果不进行压缩处理掉的话，会一直增长下去。为此Raft使用快照数据来进行日志压缩，比如针对键值a的几次操作日志a=1、删除a、a=3最后可以被压缩成为最后的结果数据即a=3。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676268578257-e8048283-4d5b-47af-90fc-1ebd9fa73ec0.png#averageHue=%23f6f6f6&clientId=ucecb680c-e209-4&from=paste&height=286&id=uef28dbe9&name=image.png&originHeight=286&originWidth=542&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25624&status=done&style=none&taskId=ua834f451-26a9-42ef-b222-db153cc8e85&title=&width=542",alt:"image.png"}})]),e._v(" "),a("p",[e._v("在上图中：")]),e._v(" "),a("ul",[a("li",[e._v("未压缩日志前，日志数据保存到了<3,5>（任期3，索引5）的位置，而在<2,3>的位置之前的数据都已经进行提交了，所以可以针对这部分数据进行压缩。")]),e._v(" "),a("li",[e._v("压缩日志之后，快照文件中存放了几个值：压缩时最后一条日志的二元数据是<2,3>，而针对a的几次操作最后的值为a=3，b的值为2。")])]),e._v(" "),a("h2",{attrs:{id:"集群成员变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群成员变化"}},[e._v("#")]),e._v(" 集群成员变化")]),e._v(" "),a("p",[e._v("考虑一种场景，原来 Raft 集群中存在三个节点，现在需要增加2 个节点。那么，在这种情况下， Raft 算法如何能保证同一个任期内，只有一个领导者呢？\n在 "),a("a",{attrs:{href:"https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Raft 论文"),a("OutboundLink")],1),e._v(" 中，作者使用配置（configuration）来表示集群由哪些节点组合，即集群所有节点的信息集合。在稳定状态下，所有节点的配置都是一致的。\n由于集群存在多个节点，因此，一次性原子地更新所有节点的配置是不可能的，集群在更新配置的过程中，可能会出现新旧配置的两个大多数：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676267007864-2d619342-3d0c-45e1-982f-72d38fd53242.png#averageHue=%231c3d3e&clientId=u29d14d5a-3967-4&from=paste&height=618&id=ub80ade65&name=image.png&originHeight=618&originWidth=898&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37252&status=done&style=none&taskId=u068a1d0d-dcd9-40fa-b1dd-722d9d11ac5&title=&width=898",alt:"image.png"}})]),e._v(" "),a("p",[e._v("例如，上图中，集群的节点数量 由 3 个增加至 5 个。由于各个节点可能在不同的时间进行新旧配置的转换，因此，可能存在一段时间，集群中在同一个任期内，存在两个领导者。一个领导者由使用旧配置的大多数选举产生，即图中节点 1， 2；一个领导者由使用新配置的大多数选举产生，即图中节点 3，4，5。\n这显然是跟 Raft 算法的规定相悖的。")]),e._v(" "),a("p",[e._v("为解决成员变更时领导者选举的问题，Raft 作者提出了几种方法。例如，可以先将集群原来所有节点关闭，更新其配置后，再启动新的集群。由于所有节点的配置都是固定的，Raft 可以保证同一任期只有一个领导者。不过此方法会导致每次成员变更时都需要关闭集群，导致集群无法对外提供服务。")]),e._v(" "),a("p",[e._v("Raft 作者还提出一种“联合共识”（joint consensus）的方法，不过此方法实现起来比较复杂，本文也不再赘述，有兴趣可以参考 "),a("a",{attrs:{href:"https://web.stanford.edu/~ouster/cgi-bin/papers/OngaroPhD.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Raft 论文"),a("OutboundLink")],1),e._v(" 有关联合共识的描述。")]),e._v(" "),a("p",[e._v("本节重点讲述单节点变更（single-server change）的方法。")]),e._v(" "),a("p",[e._v("单节点变更，即每次只允许增加或者删除一个节点，如果集群需要增加或者删除多个节点，可以通过执行多步的单节点操作实现。例如，如果需要将集群节点数量从 3 调整到 5 ，可以执行 2 次单节点变更操作，先将节点数量从 3 调整到 4，再从 4 调整到 5。")]),e._v(" "),a("p",[e._v("为什么单节点变更方法可以解决成员变更可能带来的同一个任期存在多个领导者的问题呢？")]),e._v(" "),a("p",[e._v("这是由于，不管集群节点数量是偶数，还是奇数，不管是增加节点，还是删除节点，集群中新旧配置的大多数都会存在重叠的情况，如下图所示：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2023/png/375413/1676267096812-e0e29a3f-cce0-4ae9-8755-87176319e63e.png#averageHue=%23baf8ba&clientId=u29d14d5a-3967-4&from=paste&height=900&id=ud05ac9b7&name=image.png&originHeight=900&originWidth=1314&originalType=binary&ratio=1&rotation=0&showTitle=false&size=96434&status=done&style=none&taskId=uee95231d-91ff-493f-b307-325da112994&title=&width=1314",alt:"image.png"}})]),e._v(" "),a("p",[e._v("上图蓝色区域表示采用旧配置的大多数，红色区域表示采用新配置的大多数。对于单节点变更来说，新旧配置的大多数都会存在节点重叠的情况。在 Raft 中，节点在同一个任期只有一张选票，因此，重叠的节点在同一个任期内不会投出两张选票，这样就不会出现同一任期存在两个领导者的现象。")]),e._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/crazymakercircle/p/14343154.html#autoid-h3-1-1-0",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/crazymakercircle/p/14343154.html#autoid-h3-1-1-0"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/32052223",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://zhuanlan.zhihu.com/p/32052223"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.pdai.tech/md/algorithm/alg-domain-distribute-x-raft.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.pdai.tech/md/algorithm/alg-domain-distribute-x-raft.html"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://leehao.me/Raft-%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89%EF%BC%9A%E6%88%90%E5%91%98%E5%8F%98%E6%9B%B4/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://leehao.me/Raft-%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89%EF%BC%9A%E6%88%90%E5%91%98%E5%8F%98%E6%9B%B4/"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://raft.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://raft.github.io/"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27908888",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://zhuanlan.zhihu.com/p/27908888"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[e._v("#")])]),e._v(" "),a("h3",{attrs:{id:"-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[e._v("#")])])])}),[],!1,null,null,null);a.default=r.exports}}]);