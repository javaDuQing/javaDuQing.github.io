(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{437:function(t,a,i){"use strict";i.r(a);var e=i(2),v=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"可扩展的基本思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可扩展的基本思想"}},[t._v("#")]),t._v(" 可扩展的基本思想")]),t._v(" "),a("p",[t._v("可扩展性架构的设计方法很多，但万变不离其宗，所有的可扩展性架构设计，背后的 "),a("strong",[t._v("基本思想都可以总结为一个字：拆！")])]),t._v(" "),a("p",[t._v("拆，就是将原本大一统的系统拆分成多个规模小的部分，扩展时只修改其中一部分即可，无须整个系统到处都改，通过这种方式来减少改动范围，降低改动风险")]),t._v(" "),a("p",[t._v("说起来好像挺简单，毕竟“拆”我们见得太多了。一般情况下，我们要拆一个东西时，都是简单粗暴的。例如，用推土机拆房子、用剪刀拆快递包装、用手撕开包装袋等，反正拆完了这些东西就扔了。但面对软件系统，拆就没那么简单了，因为我们并不是要摧毁一个软件系统，而是要通过拆让软件系统变得更加优美（具备更好的可扩展性）。形象地说，软件系统中的“拆”是建设性的，因此难度要高得多")]),t._v(" "),a("p",[t._v("按照不同的思路来拆分软件系统，就会得到不同的架构。常见的拆分思路有如下三种：")]),t._v(" "),a("ol",[a("li",[t._v("面向流程拆分：将整个业务流程拆分为几个阶段，每个阶段作为一部分")]),t._v(" "),a("li",[t._v("面向服务拆分：将系统提供的服务拆分，每个服务作为一部分")]),t._v(" "),a("li",[t._v("面向功能拆分：将系统提供的功能拆分，每个功能作为一部分")])]),t._v(" "),a("h2",{attrs:{id:"拆分学生信息管理系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拆分学生信息管理系统"}},[t._v("#")]),t._v(" 拆分学生信息管理系统")]),t._v(" "),a("h3",{attrs:{id:"面向流程拆分-分层架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向流程拆分-分层架构"}},[t._v("#")]),t._v(" 面向流程拆分（分层架构）")]),t._v(" "),a("p",[t._v("展示层 → 业务层 → 数据层 → 存储层，各层含义是：")]),t._v(" "),a("ul",[a("li",[t._v("展示层：负责用户页面设计，不同业务有不同的页面。例如，登录页面、注册页面、信息管理页面、安全设置页面等")]),t._v(" "),a("li",[t._v("业务层：负责具体业务逻辑的处理。例如，登录、注册、信息管理、修改密码等业务")]),t._v(" "),a("li",[t._v("数据层：负责完成数据访问。例如，增删改查数据库中的数据、记录事件到日志文件等")]),t._v(" "),a("li",[t._v("存储层：负责数据的存储。例如，关系型数据库MySQL、缓存系统Memcache等")])]),t._v(" "),a("p",[t._v("最终的架构如下：")]),t._v(" "),a("img",{attrs:{width:"300",height:"213",align:"bottom",src:"https://cdn.nlark.com/yuque/0/2022/png/375413/1650424199101-2908fb18-fd71-4c9a-ba2c-514793c5d5e5.png#clientId=ue5086c97-7c74-4&from=paste&height=180&id=ub7f889e6&name=image.png&originHeight=414&originWidth=560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=98722&status=done&style=none&taskId=u309eaa28-80f0-48a5-8e23-9862cf347b5&title=&width=244"}}),t._v(" "),a("h3",{attrs:{id:"面向服务拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向服务拆分"}},[t._v("#")]),t._v(" 面向服务拆分")]),t._v(" "),a("p",[t._v("将系统拆分为注册、登录、信息管理、安全设置等服务，最终架构示意图如下：")]),t._v(" "),a("img",{attrs:{width:"390",height:"253",align:"bottom",src:"https://cdn.nlark.com/yuque/0/2022/png/375413/1650424236216-44e7fd29-966f-423b-8a74-1808db393cb1.png#clientId=ue5086c97-7c74-4&from=paste&height=247&id=ua5f3f26c&name=image.png&originHeight=482&originWidth=1080&originalType=binary&ratio=1&rotation=0&showTitle=false&size=285368&status=done&style=none&taskId=u617b6eda-8229-4258-af79-05853229ed2&title=&width=553"}}),t._v(" "),a("h3",{attrs:{id:"面向功能拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向功能拆分"}},[t._v("#")]),t._v(" 面向功能拆分")]),t._v(" "),a("p",[t._v("每个服务都可以拆分为更多细粒度的功能，例如：")]),t._v(" "),a("ul",[a("li",[t._v("注册服务：提供多种方式进行注册，包括手机号注册、身份证注册、学生邮箱注册三个功能")]),t._v(" "),a("li",[t._v("登录服务：包括手机号登录、身份证登录、邮箱登录三个功能")]),t._v(" "),a("li",[t._v("信息管理服务：包括基本信息管理、课程信息管理、成绩信息管理等功能")]),t._v(" "),a("li",[t._v("安全设置服务：包括修改密码、安全手机、找回密码等功能")])]),t._v(" "),a("p",[t._v("最终架构图如下：\n"),a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2022/png/375413/1650424283167-44be1555-9b34-42ba-a283-969a7ec8b9b6.png#clientId=ue5086c97-7c74-4&from=paste&height=261&id=u18453d9f&name=image.png&originHeight=508&originWidth=1124&originalType=binary&ratio=1&rotation=0&showTitle=false&size=412552&status=done&style=none&taskId=u12bbd4b4-e7b9-40ec-9435-2f600dd58d8&title=&width=577",alt:"image.png"}}),t._v("\n通过学生信息管理系统的案例可以发现，不同的拆分方式，架构图差异很大。但好像无论哪种方式，最终都是可以实现的。既然如此，我们何必费尽心机去选择呢，随便挑选一个不就可以了？当然不能随便挑，否则架构设计就没有意义了，架构师也就要丢掉饭碗了。原因在于：不同的拆分方式，"),a("strong",[t._v("本质上决定了系统的扩展方式")])]),t._v(" "),a("h2",{attrs:{id:"可扩展方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可扩展方式"}},[t._v("#")]),t._v(" 可扩展方式")]),t._v(" "),a("p",[t._v("当我们谈可扩展性时，很多同学都会有一个疑惑：就算是不拆分系统，只要在设计和写代码时做好了，同样不会出现到处改的问题啊？例如，在面向服务拆分的案例中，增加“学号注册”，就算是不拆分为服务，也可以控制修改的范围，那为何我们要大费周章地去拆分系统呢？")]),t._v(" "),a("p",[t._v("在一个理想的环境，你的团队都是高手，每个程序员都很厉害，对业务都很熟悉，新来的同事很快就知晓所有的细节……那确实不拆分也没有问题。但现实却是：团队有菜鸟程序员，到底是改A处实现功能还是改B处实现功能，完全取决于他觉得哪里容易改；有的程序员比较粗心；有的程序员某天精神状态不太好；新来的同事不知道历史上某行代码为何那么“恶心”，而轻易地将其改漂亮了一些……所有的这些问题都可能出现，这时候你就会发现，合理的拆分，能够强制保证即使程序员出错，出错的范围也不会太广，影响也不会太大")]),t._v(" "),a("p",[t._v("下面是不同拆分方式应对扩展时的优势：")]),t._v(" "),a("ol",[a("li",[t._v("面向流程拆分：扩展时大部分情况只需要修改某一层，少部分情况可能修改关联的两层，不会出现所有层都同时要修改。例如学生信息管理系统，如果我们将存储层从MySQL扩展为同时支持MySQL和Oracle，那么只需要扩展存储层和数据层即可，展示层和业务层无须变动")]),t._v(" "),a("li",[t._v("面向服务拆分：对某个服务扩展，或者要增加新的服务时，只需要扩展相关服务即可，无须修改所有的服务。同样以学生管理系统为例，如果我们需要在注册服务中增加一种“学号注册”功能，则只需要修改“注册服务”和“登录服务”即可，“信息管理服务”和“安全设置”服务无须修改")]),t._v(" "),a("li",[t._v("面向功能拆分：对某个功能扩展，或者要增加新的功能时，只需要扩展相关功能即可，无须修改所有的服务。同样以学生管理系统为例，如果我们增加“学号注册”功能，则只需要在系统中增加一个新的功能模块，同时修改“登录功能”模块即可，其他功能都不受影响")])]),t._v(" "),a("p",[t._v("不同的拆分方式，将得到不同的系统架构，典型的可扩展系统架构有：")]),t._v(" "),a("ul",[a("li",[t._v("面向流程拆分：分层架构")]),t._v(" "),a("li",[t._v("面向服务拆分：SOA、微服务")]),t._v(" "),a("li",[t._v("面向功能拆分：微内核架构")])]),t._v(" "),a("p",[t._v("当然，这几个系统架构并不是非此即彼的，而是可以在系统架构设计中进行组合使用的。以学生管理系统为例，我们最终可以这样设计架构：")]),t._v(" "),a("ol",[a("li",[t._v("整体系统采用面向服务拆分中的“微服务”架构，拆分为“注册服务”“登录服务”“信息管理服务”“安全服务”，每个服务是一个独立运行的子系统")]),t._v(" "),a("li",[t._v("其中的“注册服务”子系统本身又是采用面向流程拆分的分层架构")]),t._v(" "),a("li",[t._v("“登录服务”子系统采用的是面向功能拆分的“微内核”架构")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ol",[a("li",[t._v("《从 0 开始学架构》")])])])}),[],!1,null,null,null);a.default=v.exports}}]);